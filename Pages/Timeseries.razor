@page "/timeseries"
@using System.Text.Json
@using System.Net.Http.Headers
@using MudBlazor.Extensions
@using exerciselog.Services
@using MudBlazor
@using Microsoft.Extensions.Logging
@inject Api apiService
@inject IJSRuntime JS
@inject ISnackbar Snackbar
@inject ILogger<Timeseries> Logger

<PageTitle>Timeseries</PageTitle>

<h1>Timeseries</h1>
<p>Log your time series</p>
@page "/example-form"

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-6">
    <MudCard>
        <MudCardContent>
            <MudText Typo="Typo.h6">Register timeseries entry</MudText>
            <MudForm>
                <!-- Full Name -->
                <MudItem xs="12">
                    <MudText Typo="Typo.subtitle2">Time</MudText>
                    <MudDatePicker @bind-Date="@Date" Editable="true" Label="Select Date" />
                    <MudTimePicker @bind-Time="@selectedTime" Editable="true" Label="Select Time" />
                </MudItem>

                <MudItem xs="12">
                    <MudRadioGroup @bind-Value="UseExistingDimension">
                        <MudRadio Value="true">Existing dimension</MudRadio>
                        <MudRadio Value="false">New dimension</MudRadio>
                    </MudRadioGroup>
                    @if (UseExistingDimension)
                    {
                        <MudAutocomplete T="string" Label="Select or enter a dimension" @bind-Value="Ts.Dimension"
                            CoerceText="true" Clearable="true" Placeholder="Choose dimension" SearchFunc="SearchValues">
                        </MudAutocomplete>
                    }
                    else
                    {
                        <MudItem xs="12">
                            <MudText Typo="Typo.subtitle2">Dimension</MudText>
                            <MudTextField T="string" Label="Value" @bind-Value="NewDimension">Dimension</MudTextField>
                        </MudItem>
                    }

                    <p>You selected: @SelectedValue</p>
                </MudItem>

                <MudItem xs="12">
                    <MudText Typo="Typo.subtitle2">Value</MudText>
                    <MudTextField T="double" Label="Value" @bind-Value="Ts.Value">0.0</MudTextField>
                </MudItem>
                <MudItem xs="12">
                    <MudText Typo="Typo.subtitle2">Tags</MudText>
                    <MudTextField T="string" Label="Tags" @bind-Value="Tags"></MudTextField>
                </MudItem>

                <!-- Submit Button -->
                <MudItem xs="12" Class="mt-4">
                    <MudButton @onclick="CreateTimeseries" Variant="Variant.Filled" Color="Color.Primary">Submit</MudButton>
                </MudItem>
            </MudForm>
        </MudCardContent>
    </MudCard>

    <MudCard>
        <MudCardContent>
        <h3>Latest timeseries</h3>
            <MudTable Items="@LatestTimeseries" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info">
                <HeaderContent>
                    <MudTh>Time</MudTh>
                    <MudTh>Dimension</MudTh>
                    <MudTh>Value</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Time">@context.Timestamp</MudTd>
                    <MudTd DataLabel="Dimension">@context.Dimension</MudTd>
                    <MudTd DataLabel="Value">@context.Value</MudTd>
                </RowTemplate>
            </MudTable>
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    public TimeseriesDto Ts = new TimeseriesDto();
    public string Tags = "";
    public DateTime? Date = DateTime.Today;
    public TimeSpan? selectedTime = DateTime.UtcNow - DateTime.Today;
    private List<string> Dimensions = ["this", "that"];
    private List<TimeseriesDto> LatestTimeseries = [];
    private bool _loading;

    public bool UseExistingDimension { get; set; }

    private string NewDimension { get; set; }
    protected override async Task OnInitializedAsync()
    {
        // Asynchronous initialization code
        // Example: Fetch data from an API
        Dimensions = await apiService.GetUniqueTimeseriesDimensions();
        LatestTimeseries = await apiService.GetLatestTimeseries(5);
        UseExistingDimension = true;
    }

    private async void CreateTimeseries()
    {
        var TimeStamp = Date + selectedTime;
        Ts.Timestamp = TimeStamp.HasValue
            ? TimeStamp.Value.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffZ")
            : "";
        if (!UseExistingDimension)
        {
            Ts.Dimension = NewDimension;
        }
        try {
            await apiService.PostTimeseries(Ts);
            Snackbar.Add("Data submitted successfully!");
            LatestTimeseries = await apiService.GetLatestTimeseries(5);
            StateHasChanged();
        }
        catch (Exception ex) {
            Console.Write(ex.Message);
            Snackbar.Add("Failed to submit timeseries");
        }
    }

    private string SelectedValue { get; set; }

    // Search function to filter values based on user input
    private Task<IEnumerable<string>> SearchValues(string value, CancellationToken token)
    {
        // Filter the list based on the input and return matching values
        var result = Dimensions.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
        return Task.FromResult(result);
    }
}
